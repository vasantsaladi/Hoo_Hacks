
  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  State Management
  - Use React Context for global UI state (theme, modals).
  - Implement Zustand for complex application state.
  - Leverage Next.js Server Actions for data mutations.
  - Use React Query/SWR for server state management.
  
  Error Handling
  - Implement global error boundaries.
  - Use typed error handling with custom error classes.
  - Provide meaningful error messages and recovery options.
  - Log errors to monitoring service.
  
  Testing
  - Write unit tests with Jest and React Testing Library.
  - Implement E2E tests with Playwright.
  - Use MSW for API mocking in tests.
  - Maintain high test coverage for critical paths.
  
  Accessibility
  - Follow WCAG 2.1 guidelines.
  - Use semantic HTML elements.
  - Implement proper ARIA attributes.
  - Ensure keyboard navigation support.
  
  Security
  - Implement CSP headers.
  - Sanitize user inputs.
  - Use secure authentication methods.
  - Follow OWASP security guidelines.
  
  Internationalization
  - Use Next.js built-in i18n.
  - Support RTL languages.
  - Implement number and date formatting.
  - Handle pluralization rules.
  
  Documentation
  - Maintain comprehensive README.
  - Document component APIs with TSDoc.
  - Include usage examples.
  - Document architectural decisions.
  Follow Next.js docs for Data Fetching, Rendering, and Routing.
  